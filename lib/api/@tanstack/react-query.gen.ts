// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getStarsByCrew, getBundledTonsByCrew, getRolledTonsByCrew, getBloomYardScrapTonsByCrew, getBonusByCrew, mergeBonusByCrew, getIncidentByCrew, mergeIncidentByCrew, calculateYields, getCobbles, calculateTheoreticalBonuses, getMeasurementTypes, getLatestMeasurements, getHistoricalMeasurements, getMechanicalWorkOrders, getHomeSseEvents } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetStarsByCrewData, GetBundledTonsByCrewData, GetRolledTonsByCrewData, GetBloomYardScrapTonsByCrewData, GetBonusByCrewData, MergeBonusByCrewData, MergeBonusByCrewError, MergeBonusByCrewResponse, GetIncidentByCrewData, MergeIncidentByCrewData, MergeIncidentByCrewError, MergeIncidentByCrewResponse, CalculateYieldsData, GetCobblesData, CalculateTheoreticalBonusesData, CalculateTheoreticalBonusesError, CalculateTheoreticalBonusesResponse, GetMeasurementTypesData, GetLatestMeasurementsData, GetHistoricalMeasurementsData, GetMechanicalWorkOrdersData, GetHomeSseEventsData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getStarsByCrewQueryKey = (options: Options<GetStarsByCrewData>) => createQueryKey('getStarsByCrew', options);

/**
 * Get stars by crew
 * Retrieves consolidated star counts by crew for a given date range
 */
export const getStarsByCrewOptions = (options: Options<GetStarsByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStarsByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStarsByCrewQueryKey(options)
    });
};

export const getBundledTonsByCrewQueryKey = (options: Options<GetBundledTonsByCrewData>) => createQueryKey('getBundledTonsByCrew', options);

/**
 * Get bundled tons by crew
 * Retrieves bundled tons production by crew for a given date range
 */
export const getBundledTonsByCrewOptions = (options: Options<GetBundledTonsByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBundledTonsByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBundledTonsByCrewQueryKey(options)
    });
};

export const getRolledTonsByCrewQueryKey = (options: Options<GetRolledTonsByCrewData>) => createQueryKey('getRolledTonsByCrew', options);

/**
 * Get rolled tons by crew
 * Retrieves rolled tons production by crew for a given date range
 */
export const getRolledTonsByCrewOptions = (options: Options<GetRolledTonsByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRolledTonsByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRolledTonsByCrewQueryKey(options)
    });
};

export const getBloomYardScrapTonsByCrewQueryKey = (options: Options<GetBloomYardScrapTonsByCrewData>) => createQueryKey('getBloomYardScrapTonsByCrew', options);

/**
 * Get bloom yard scrap tons by crew
 * Retrieves bloom yard scrap tons by crew for a given date range
 */
export const getBloomYardScrapTonsByCrewOptions = (options: Options<GetBloomYardScrapTonsByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBloomYardScrapTonsByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBloomYardScrapTonsByCrewQueryKey(options)
    });
};

export const getBonusByCrewQueryKey = (options: Options<GetBonusByCrewData>) => createQueryKey('getBonusByCrew', options);

/**
 * Get bonus by crew
 * Retrieves production bonus data by crew for a given date range
 */
export const getBonusByCrewOptions = (options: Options<GetBonusByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBonusByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBonusByCrewQueryKey(options)
    });
};

export const mergeBonusByCrewQueryKey = (options: Options<MergeBonusByCrewData>) => createQueryKey('mergeBonusByCrew', options);

/**
 * Merge bonus by crew
 * Merges production bonus data by crew
 */
export const mergeBonusByCrewOptions = (options: Options<MergeBonusByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await mergeBonusByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: mergeBonusByCrewQueryKey(options)
    });
};

/**
 * Merge bonus by crew
 * Merges production bonus data by crew
 */
export const mergeBonusByCrewMutation = (options?: Partial<Options<MergeBonusByCrewData>>): UseMutationOptions<MergeBonusByCrewResponse, MergeBonusByCrewError, Options<MergeBonusByCrewData>> => {
    const mutationOptions: UseMutationOptions<MergeBonusByCrewResponse, MergeBonusByCrewError, Options<MergeBonusByCrewData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await mergeBonusByCrew({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getIncidentByCrewQueryKey = (options: Options<GetIncidentByCrewData>) => createQueryKey('getIncidentByCrew', options);

/**
 * Get incident by crew
 * Retrieves incident data by crew for a given date range
 */
export const getIncidentByCrewOptions = (options: Options<GetIncidentByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIncidentByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIncidentByCrewQueryKey(options)
    });
};

export const mergeIncidentByCrewQueryKey = (options: Options<MergeIncidentByCrewData>) => createQueryKey('mergeIncidentByCrew', options);

/**
 * Merge incident by crew
 * Merges incident data by crew
 */
export const mergeIncidentByCrewOptions = (options: Options<MergeIncidentByCrewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await mergeIncidentByCrew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: mergeIncidentByCrewQueryKey(options)
    });
};

/**
 * Merge incident by crew
 * Merges incident data by crew
 */
export const mergeIncidentByCrewMutation = (options?: Partial<Options<MergeIncidentByCrewData>>): UseMutationOptions<MergeIncidentByCrewResponse, MergeIncidentByCrewError, Options<MergeIncidentByCrewData>> => {
    const mutationOptions: UseMutationOptions<MergeIncidentByCrewResponse, MergeIncidentByCrewError, Options<MergeIncidentByCrewData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await mergeIncidentByCrew({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const calculateYieldsQueryKey = (options: Options<CalculateYieldsData>) => createQueryKey('calculateYields', options);

/**
 * Calculate yields
 * Calculates weekly and year-to-date yields by crew for given date ranges
 */
export const calculateYieldsOptions = (options: Options<CalculateYieldsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await calculateYields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: calculateYieldsQueryKey(options)
    });
};

export const getCobblesQueryKey = (options: Options<GetCobblesData>) => createQueryKey('getCobbles', options);

/**
 * Get cobbles
 * Retrieves cobbles data for a given date range
 */
export const getCobblesOptions = (options: Options<GetCobblesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCobbles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCobblesQueryKey(options)
    });
};

export const calculateTheoreticalBonusesQueryKey = (options: Options<CalculateTheoreticalBonusesData>) => createQueryKey('calculateTheoreticalBonuses', options);

/**
 * Calculate theoretical bonuses
 * Calculates theoretical bonuses based on production data and delays
 */
export const calculateTheoreticalBonusesOptions = (options: Options<CalculateTheoreticalBonusesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await calculateTheoreticalBonuses({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: calculateTheoreticalBonusesQueryKey(options)
    });
};

/**
 * Calculate theoretical bonuses
 * Calculates theoretical bonuses based on production data and delays
 */
export const calculateTheoreticalBonusesMutation = (options?: Partial<Options<CalculateTheoreticalBonusesData>>): UseMutationOptions<CalculateTheoreticalBonusesResponse, CalculateTheoreticalBonusesError, Options<CalculateTheoreticalBonusesData>> => {
    const mutationOptions: UseMutationOptions<CalculateTheoreticalBonusesResponse, CalculateTheoreticalBonusesError, Options<CalculateTheoreticalBonusesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await calculateTheoreticalBonuses({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMeasurementTypesQueryKey = (options?: Options<GetMeasurementTypesData>) => createQueryKey('getMeasurementTypes', options);

/**
 * Get all measurement types
 * Retrieves all measurement types ordered by sort order
 */
export const getMeasurementTypesOptions = (options?: Options<GetMeasurementTypesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMeasurementTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMeasurementTypesQueryKey(options)
    });
};

export const getLatestMeasurementsQueryKey = (options?: Options<GetLatestMeasurementsData>) => createQueryKey('getLatestMeasurements', options);

/**
 * Get latest measurements
 * Retrieves the most recent reading for each measurement type
 */
export const getLatestMeasurementsOptions = (options?: Options<GetLatestMeasurementsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLatestMeasurements({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLatestMeasurementsQueryKey(options)
    });
};

export const getHistoricalMeasurementsQueryKey = (options: Options<GetHistoricalMeasurementsData>) => createQueryKey('getHistoricalMeasurements', options);

/**
 * Get historical measurements
 * Retrieves historical measurements for a specific type from a given time
 */
export const getHistoricalMeasurementsOptions = (options: Options<GetHistoricalMeasurementsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHistoricalMeasurements({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHistoricalMeasurementsQueryKey(options)
    });
};

export const getMechanicalWorkOrdersQueryKey = (options: Options<GetMechanicalWorkOrdersData>) => createQueryKey('getMechanicalWorkOrders', options);

/**
 * Get mechanical work orders
 * Retrieves all mechnical work orders ordered by sort order
 */
export const getMechanicalWorkOrdersOptions = (options: Options<GetMechanicalWorkOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMechanicalWorkOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMechanicalWorkOrdersQueryKey(options)
    });
};

export const getHomeSseEventsQueryKey = (options?: Options<GetHomeSseEventsData>) => createQueryKey('getHomeSseEvents', options);

export const getHomeSseEventsOptions = (options?: Options<GetHomeSseEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHomeSseEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHomeSseEventsQueryKey(options)
    });
};